generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password_verifier_v2 String
  name                String?
  phone               String?
  role                Role     @default(USER)
  isActive            Boolean  @default(true)
  isSuperAdmin        Boolean  @default(false)
  lastLogin           DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  blobs               EncryptedBlob[]
  devices             Device[]
  securityLogs        SecurityLog[]
  sessions            Session[]
  notifications       Notification[]
  permissions         Permission[]
  adminActivities     AdminActivity[]
  reports             Report[]
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

// Device Management
model Device {
  id                String   @id @default(uuid())
  userId            String
  deviceId          String   @unique
  name              String
  type              String
  platform          String
  isBlocked         Boolean  @default(false)
  isOnline          Boolean  @default(false)
  lastSeen          DateTime @default(now())
  ipAddress         String?
  location          String?
  syncStatus        String   @default("pending")
  lastSyncAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  securityLogs      SecurityLog[]
}

// Security & Monitoring
model SecurityLog {
  id                String   @id @default(uuid())
  userId            String?
  deviceId          String?
  eventType         String
  severity          String
  description       String
  ipAddress         String?
  userAgent         String?
  metadata          Json?
  resolved          Boolean  @default(false)
  createdAt         DateTime @default(now())
  
  user              User?    @relation(fields: [userId], references: [id])
  device            Device?  @relation(fields: [deviceId], references: [id])
}

// Session Management
model Session {
  id                String   @id @default(uuid())
  userId            String
  token             String   @unique
  deviceInfo        String?
  ipAddress         String?
  expiresAt         DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Permissions & RBAC
model Permission {
  id                String   @id @default(uuid())
  userId            String
  resource          String
  action            String
  granted           Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, resource, action])
}

// Admin Activity Tracking
model AdminActivity {
  id                String   @id @default(uuid())
  adminId           String
  action            String
  targetType        String?
  targetId          String?
  description       String
  metadata          Json?
  createdAt         DateTime @default(now())
  
  admin             User     @relation(fields: [adminId], references: [id])
}

// Notifications
model Notification {
  id                String   @id @default(uuid())
  userId            String
  title             String
  message           String
  type              String
  priority          String   @default("normal")
  isRead            Boolean  @default(false)
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Citizen Fix Reports
enum ReportStatus {
  SUBMITTED
  IN_PROGRESS
  FIXED
}

model Report {
  id          String        @id @default(uuid())
  userId      String
  issueType   String
  description String
  photoUrl    String?
  latitude    Float
  longitude   Float
  status      ReportStatus  @default(SUBMITTED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
}

// Encrypted Data Storage
model EncryptedBlob {
  id         String   @id @default(uuid())
  userId     String
  namespace  String
  itemKey    String
  version    Int      @default(1)
  ciphertext String
  nonce      String
  mac        String
  aad        String?
  syncStatus String   @default("synced")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, namespace, itemKey])
  @@index([syncStatus])
}

// Database Migration Management
model Migration {
  id                String   @id @default(uuid())
  version           String   @unique
  name              String
  status            String   @default("pending")
  appliedAt         DateTime?
  rolledBackAt      DateTime?
  error             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Sync Queue for offline-to-online sync
model SyncQueue {
  id                String   @id @default(uuid())
  userId            String
  operation         String   // CREATE, UPDATE, DELETE
  entity            String   // device, blob, etc.
  entityId          String
  data              Json
  status            String   @default("pending") // pending, syncing, completed, failed
  retryCount        Int      @default(0)
  error             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId, status])
  @@index([status, createdAt])
}
