import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../core/services/vulnerability_scanning_service.dart';
import '../../core/theme/app_theme.dart';

class VulnerabilityScanningPage extends StatefulWidget {
  const VulnerabilityScanningPage({Key? key}) : super(key: key);

  @override
  State<VulnerabilityScanningPage> createState() => _VulnerabilityScanningPageState();
}

class _VulnerabilityScanningPageState extends State<VulnerabilityScanningPage> with TickerProviderStateMixin {
  late TabController _tabController;
  String? _currentScanId;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Vulnerability Scanning'),
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(text: 'Dashboard', icon: Icon(Icons.dashboard)),
            Tab(text: 'Vulnerabilities', icon: Icon(Icons.security)),
            Tab(text: 'Scans', icon: Icon(Icons.scanner)),
            Tab(text: 'Settings', icon: Icon(Icons.settings)),
          ],
        ),
      ),
      body: Consumer<VulnerabilityScanningService>(
        builder: (context, scanService, child) {
          return TabBarView(
            controller: _tabController,
            children: [
              _buildDashboardTab(scanService),
              _buildVulnerabilitiesTab(scanService),
              _buildScansTab(scanService),
              _buildSettingsTab(scanService),
            ],
          );
        },
      ),
    );
  }

  Widget _buildDashboardTab(VulnerabilityScanningService scanService) {
    final stats = scanService.getVulnerabilityStatistics();
    final activeVulns = scanService.activeVulnerabilities;
    
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Security Score Card
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  Row(
                    children: [
                      Icon(Icons.security, color: AppTheme.primaryColor),
                      const SizedBox(width: 8),
                      const Text('Security Score', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                    ],
                  ),
                  const SizedBox(height: 16),
                  CircularProgressIndicator(
                    value: stats['current_security_score'] / 100,
                    strokeWidth: 8,
                    backgroundColor: Colors.grey[300],
                    valueColor: AlwaysStoppedAnimation<Color>(
                      _getSecurityScoreColor(stats['current_security_score']),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '${stats['current_security_score'].toStringAsFixed(1)}%',
                    style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  ),
                ],
              ),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Quick Stats
          Row(
            children: [
              Expanded(
                child: _buildStatCard(
                  'Active Vulnerabilities',
                  stats['active_vulnerabilities'].toString(),
                  Icons.warning,
                  Colors.orange,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'Total Scans',
                  stats['total_scans'].toString(),
                  Icons.scanner,
                  Colors.blue,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 8),
          
          Row(
            children: [
              Expanded(
                child: _buildStatCard(
                  'Resolved',
                  stats['resolved_vulnerabilities'].toString(),
                  Icons.check_circle,
                  Colors.green,
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: _buildStatCard(
                  'False Positives',
                  stats['false_positives'].toString(),
                  Icons.block,
                  Colors.grey,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Severity Breakdown
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('Vulnerability Severity Breakdown', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 16),
                  ...VulnerabilitySeverity.values.map((severity) {
                    final count = stats['severity_breakdown'][severity.name] ?? 0;
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4),
                      child: Row(
                        children: [
                          Container(
                            width: 12,
                            height: 12,
                            decoration: BoxDecoration(
                              color: _getSeverityColor(severity),
                              shape: BoxShape.circle,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Expanded(child: Text(severity.name.toUpperCase())),
                          Text(count.toString(), style: const TextStyle(fontWeight: FontWeight.bold)),
                        ],
                      ),
                    );
                  }).toList(),
                ],
              ),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Recent Vulnerabilities
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('Recent Vulnerabilities', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 16),
                  if (activeVulns.isEmpty)
                    const Center(
                      child: Padding(
                        padding: EdgeInsets.all(32),
                        child: Text('No active vulnerabilities found'),
                      ),
                    )
                  else
                    ...activeVulns.take(5).map((vuln) => _buildVulnerabilityTile(vuln)).toList(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildVulnerabilitiesTab(VulnerabilityScanningService scanService) {
    final vulnerabilities = scanService.activeVulnerabilities;
    
    return Column(
      children: [
        // Filter Bar
        Container(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Expanded(
                child: TextField(
                  decoration: const InputDecoration(
                    hintText: 'Search vulnerabilities...',
                    prefixIcon: Icon(Icons.search),
                    border: OutlineInputBorder(),
                  ),
                  onChanged: (value) {
                    // TODO: Implement search filtering
                  },
                ),
              ),
              const SizedBox(width: 8),
              PopupMenuButton<VulnerabilitySeverity>(
                icon: const Icon(Icons.filter_list),
                onSelected: (severity) {
                  // TODO: Implement severity filtering
                },
                itemBuilder: (context) => VulnerabilitySeverity.values.map((severity) {
                  return PopupMenuItem(
                    value: severity,
                    child: Row(
                      children: [
                        Container(
                          width: 12,
                          height: 12,
                          decoration: BoxDecoration(
                            color: _getSeverityColor(severity),
                            shape: BoxShape.circle,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(severity.name.toUpperCase()),
                      ],
                    ),
                  );
                }).toList(),
              ),
            ],
          ),
        ),
        
        // Vulnerabilities List
        Expanded(
          child: vulnerabilities.isEmpty
            ? const Center(child: Text('No vulnerabilities found'))
            : ListView.builder(
                itemCount: vulnerabilities.length,
                itemBuilder: (context, index) {
                  final vuln = vulnerabilities[index];
                  return _buildDetailedVulnerabilityTile(vuln, scanService);
                },
              ),
        ),
      ],
    );
  }

  Widget _buildScansTab(VulnerabilityScanningService scanService) {
    final scans = scanService.scans;
    
    return Column(
      children: [
        // Scan Controls
        Container(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: scanService.isScanning ? null : () => _performScan(scanService, ScanType.quick),
                  icon: const Icon(Icons.flash_on),
                  label: const Text('Quick Scan'),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: scanService.isScanning ? null : () => _performScan(scanService, ScanType.comprehensive),
                  icon: const Icon(Icons.security),
                  label: const Text('Full Scan'),
                ),
              ),
            ],
          ),
        ),
        
        if (scanService.isScanning)
          const LinearProgressIndicator(),
        
        // Scans List
        Expanded(
          child: scans.isEmpty
            ? const Center(child: Text('No scans performed yet'))
            : ListView.builder(
                itemCount: scans.length,
                itemBuilder: (context, index) {
                  final scan = scans[index];
                  return _buildScanTile(scan);
                },
              ),
        ),
      ],
    );
  }

  Widget _buildSettingsTab(VulnerabilityScanningService scanService) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('Scan Configuration', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 16),
                  SwitchListTile(
                    title: const Text('Automatic Daily Scans'),
                    subtitle: const Text('Run quick scans automatically every 24 hours'),
                    value: true, // TODO: Make this configurable
                    onChanged: (value) {
                      // TODO: Implement auto-scan toggle
                    },
                  ),
                  SwitchListTile(
                    title: const Text('Real-time Monitoring'),
                    subtitle: const Text('Monitor for vulnerabilities in real-time'),
                    value: true, // TODO: Make this configurable
                    onChanged: (value) {
                      // TODO: Implement real-time monitoring toggle
                    },
                  ),
                ],
              ),
            ),
          ),
          
          const SizedBox(height: 16),
          
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('Data Management', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 16),
                  ListTile(
                    leading: const Icon(Icons.download),
                    title: const Text('Export Vulnerability Data'),
                    subtitle: const Text('Download vulnerability reports'),
                    onTap: () => _exportVulnerabilityData(scanService),
                  ),
                  ListTile(
                    leading: const Icon(Icons.delete_sweep),
                    title: const Text('Clear Resolved Vulnerabilities'),
                    subtitle: const Text('Remove all resolved vulnerabilities'),
                    onTap: () => _showClearResolvedDialog(scanService),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard(String title, String value, IconData icon, Color color) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Icon(icon, color: color, size: 32),
            const SizedBox(height: 8),
            Text(value, style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
            Text(title, style: const TextStyle(fontSize: 12), textAlign: TextAlign.center),
          ],
        ),
      ),
    );
  }

  Widget _buildVulnerabilityTile(Vulnerability vulnerability) {
    return ListTile(
      leading: Container(
        width: 12,
        height: 12,
        decoration: BoxDecoration(
          color: _getSeverityColor(vulnerability.severity),
          shape: BoxShape.circle,
        ),
      ),
      title: Text(vulnerability.title),
      subtitle: Text(vulnerability.component),
      trailing: Text(vulnerability.cvssScore.toStringAsFixed(1)),
      onTap: () => _showVulnerabilityDetails(vulnerability),
    );
  }

  Widget _buildDetailedVulnerabilityTile(Vulnerability vulnerability, VulnerabilityScanningService scanService) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      child: ExpansionTile(
        leading: Container(
          width: 12,
          height: 12,
          decoration: BoxDecoration(
            color: _getSeverityColor(vulnerability.severity),
            shape: BoxShape.circle,
          ),
        ),
        title: Text(vulnerability.title),
        subtitle: Text('${vulnerability.component} • CVSS: ${vulnerability.cvssScore.toStringAsFixed(1)}'),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Description:', style: const TextStyle(fontWeight: FontWeight.bold)),
                Text(vulnerability.description),
                const SizedBox(height: 8),
                if (vulnerability.cveId != null) ...[
                  Text('CVE ID:', style: const TextStyle(fontWeight: FontWeight.bold)),
                  Text(vulnerability.cveId!),
                  const SizedBox(height: 8),
                ],
                if (vulnerability.recommendations.isNotEmpty) ...[
                  Text('Recommendations:', style: const TextStyle(fontWeight: FontWeight.bold)),
                  ...vulnerability.recommendations.map((rec) => Text('• $rec')).toList(),
                  const SizedBox(height: 16),
                ],
                Row(
                  children: [
                    ElevatedButton(
                      onPressed: () => scanService.resolveVulnerability(vulnerability.id),
                      child: const Text('Mark Resolved'),
                    ),
                    const SizedBox(width: 8),
                    TextButton(
                      onPressed: () => scanService.markAsFalsePositive(vulnerability.id),
                      child: const Text('False Positive'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildScanTile(SecurityScan scan) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      child: ListTile(
        leading: Icon(_getScanTypeIcon(scan.type)),
        title: Text('${scan.type.name.toUpperCase()} Scan'),
        subtitle: Text(
          '${scan.vulnerabilitiesFound} vulnerabilities • ${scan.startTime.toString().split('.')[0]}',
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              '${scan.securityScore.toStringAsFixed(1)}%',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: _getSecurityScoreColor(scan.securityScore),
              ),
            ),
            if (scan.duration != null)
              Text(
                '${scan.duration!.inSeconds}s',
                style: const TextStyle(fontSize: 12),
              ),
          ],
        ),
        onTap: () => _showScanDetails(scan),
      ),
    );
  }

  Color _getSeverityColor(VulnerabilitySeverity severity) {
    switch (severity) {
      case VulnerabilitySeverity.critical:
        return Colors.red;
      case VulnerabilitySeverity.high:
        return Colors.orange;
      case VulnerabilitySeverity.medium:
        return Colors.yellow;
      case VulnerabilitySeverity.low:
        return Colors.blue;
      case VulnerabilitySeverity.info:
        return Colors.grey;
    }
  }

  Color _getSecurityScoreColor(double score) {
    if (score >= 80) return Colors.green;
    if (score >= 60) return Colors.orange;
    return Colors.red;
  }

  IconData _getScanTypeIcon(ScanType type) {
    switch (type) {
      case ScanType.quick:
        return Icons.flash_on;
      case ScanType.comprehensive:
        return Icons.security;
      case ScanType.targeted:
        return Icons.gps_fixed;
      case ScanType.compliance:
        return Icons.verified_user;
    }
  }

  Future<void> _performScan(VulnerabilityScanningService scanService, ScanType scanType) async {
    try {
      final scanId = await scanService.performScan(scanType);
      setState(() {
        _currentScanId = scanId;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${scanType.name.toUpperCase()} scan completed')),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Scan failed: $e')),
        );
      }
    }
  }

  void _showVulnerabilityDetails(Vulnerability vulnerability) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(vulnerability.title),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Component: ${vulnerability.component}'),
              Text('Severity: ${vulnerability.severity.name.toUpperCase()}'),
              Text('CVSS Score: ${vulnerability.cvssScore.toStringAsFixed(1)}'),
              if (vulnerability.cveId != null)
                Text('CVE ID: ${vulnerability.cveId}'),
              const SizedBox(height: 16),
              Text('Description:', style: const TextStyle(fontWeight: FontWeight.bold)),
              Text(vulnerability.description),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  void _showScanDetails(SecurityScan scan) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('${scan.type.name.toUpperCase()} Scan Details'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Started: ${scan.startTime}'),
              if (scan.endTime != null)
                Text('Completed: ${scan.endTime}'),
              if (scan.duration != null)
                Text('Duration: ${scan.duration!.inSeconds} seconds'),
              Text('Vulnerabilities Found: ${scan.vulnerabilitiesFound}'),
              Text('Security Score: ${scan.securityScore.toStringAsFixed(1)}%'),
              const SizedBox(height: 16),
              Text('Severity Breakdown:', style: const TextStyle(fontWeight: FontWeight.bold)),
              ...scan.severityBreakdown.entries.map((entry) {
                return Text('${entry.key.name.toUpperCase()}: ${entry.value}');
              }).toList(),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  void _exportVulnerabilityData(VulnerabilityScanningService scanService) {
    final data = scanService.exportVulnerabilityData();
    // TODO: Implement actual file export
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Vulnerability data exported successfully')),
    );
  }

  void _showClearResolvedDialog(VulnerabilityScanningService scanService) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Clear Resolved Vulnerabilities'),
        content: const Text('Are you sure you want to remove all resolved vulnerabilities? This action cannot be undone.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              // TODO: Implement clear resolved vulnerabilities
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Resolved vulnerabilities cleared')),
              );
            },
            child: const Text('Clear'),
          ),
        ],
      ),
    );
  }
}
